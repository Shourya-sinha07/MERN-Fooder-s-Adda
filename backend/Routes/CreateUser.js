const express = require("express");
const { body, validationResult } = require("express-validator");
const router = express.Router();
const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const jwtSecret = "MynameisShouryasinhaiamthedeveloperofthisapplication";

//Backend code for create user
router.post(
  "/createuser",
  //Here we apply validation on email and password that email must be an email and password must contain a capital letter ,a small letter and a special symbol
  [
    body("email").isEmail(),
    body("password", "password is too small").matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{5,}$/
    ),
  ],
  async (req, res) => {
    const errors = validationResult(req);

    // if a user enter wrong email format or password without following  limitation set by Express Validator then return status code 400which is a bad request and send a error as response
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    //Here we generating salt which will be added to password for hashing to make it more secure.Salt is bassically random 10 digit string generated by bycrypt js
    const salt = await bcrypt.genSalt(10);

    // Here we addding that salt with the hash password and stored it in securePassword
    let securePassword = await bcrypt.hash(req.body.password, salt);

    //Here , .create  function is responsible for creating a new record in database using User model. It takes Object as argument where properties are present like name,email and password and location.And these properties get its value from req.body (means the data entered by the user )
    await User.create({
      name: req.body.name, //in name property assign the value of name field from request.body
      email: req.body.email, //same for email and location
      password: securePassword, //here but we not directly saved the password from request.body beacause here we store hashed password which we done using bycrypt.js
      location: req.body.location,
    });
    //if everything is done properly then send success true
    res.json({
      success: true,
    });
  }
);


// Backend Code for login 

//This method take 3 parameter 1 is pathname ,express validator(optional),and a async function where all work done
router.post(
  "/loginuser",

  //Here we apply validation on email and password that email must be an email and password must contain a capital letter ,a small letter and a special symbol
  [
    body("email").isEmail(),
    body("password", "password is too small").matches(
      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{5,}$/
    ),
  ],
  async (req, res) => {

    //Here is same taking email and passworrd from the req.body
    let email = req.body.email;
    let password = req.body.password;

    let userdata = await User.findOne({ email });// here we finding the email given by user  in database .If found then stored it in userdata
    if (!userdata) {// If iuserdata is not found or email is not oresent in databse then return a bad request and tell the user to please login with coreect credentials
      return res.status(400).json({ errors: "Please use correct credentials" });
    }

    //Here we comparing password that user entered a password is match with his password which is stored in database during the time of creating that user   
    const comparePassword = await bcrypt.compare(
      req.body.password,
      userdata.password
    );
    if (!comparePassword) { // if comparision fail then  return a bad request
      return res.status(400).json({ errors: "Please use correct credentials" });
    }

    // Basiaclly in data one ct a user object i s 
    const data = {
      user: {
        id: userdata.id,
      },
    };
    const authtoken = jwt.sign(data, jwtSecret);//here we generate auth token and make it unique so we use object it 
    return res.json({ success: true, authtoken: authtoken });
  }
);
module.exports = router;
